# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
trigger:
- none
pool:
  vmImage: 'ubuntu-latest'

steps:

- task: Maven@3
  displayName: Build with Maven
  inputs:
    mavenPomFile: 'app/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
- task: Bash@3
  displayName: Veracode SCA
  inputs: 
    targetType: 'inline'
    SRCCLR_API_TOKEN: '$(SRCCLR_API_TOKEN)'
    script: | 
      curl -sSL https://download.sourceclear.com/ci.sh | sh -s scan ./app --update-advisor --recursive 

- task: Bash@3
  displayName: Veracode Pipeline
  inputs:
    targetType: 'inline'
    script: |
      curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      unzip -o pipeline-scan-LATEST.zip
      java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f /home/vsts/work/1/s/app/target/verademo.war || true
- publish: $(System.DefaultWorkingDirectory)/results.json
  artifact: VeracodeBaseline

- task: VeracodePipelineScan@0
  inputs:
    VeracodeAPIID: '$(VERACODE_API_ID)'
    VeracodeAPIsecret: '$(VERACODE_API_KEY)'
    fileToScan: '$(System.DefaultWorkingDirectory)/verademo.war'
    baselineFileGeneration: true
    baselineFileStorageProject: 'VeraDemo'
    baselineFileStorageReponame: 'VeraDemo'
    baselineFileStorageBranch: 'refs/heads/azure-pipelinesSDFS'
  
- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Endpoint'
    AnalysisService: 'VeracodeAnalysisCenter'
    veracodeAppProfile: '$(system.teamProject)'
    version: '$(build.buildNumber)'
    filepath: '$(build.artifactstagingdirectory)'
    sandboxName: 'NightlyBuild'
    createProfile: true
    importResults: true
    failBuildIfUploadAndScanBuildStepFails: false
    maximumWaitTime: '360'